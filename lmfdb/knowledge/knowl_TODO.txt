TASKS:

* Think about security exploits from creation of dynamic lists (append)
* should the Knowl object have an attribute saying if it is or not the most recent knowl?
* Regex replace title=
* cmf.newform expand/hide all doesn't work
* Delete jquery code in repo
* Change horizontal spacing on history arrow
* On prod, history permalinks display the wrong knowl

BUGS:
* Test ids_referencing on prod.
* INFO:knowledge@2019-03-11 19:52:10,110: Oops, failed to set the lock. Error: column "who" of relation "kwl_locks" does not exist
LINE 1: INSERT INTO kwl_locks (id, timestamp, who) VALUES ('cmf', '2...

Ask Farmer:
* delete unused javascripts
* issues against using cdn

LATER:
* Take away insert privleges on kwl_knowls from webserver while we mess with stuff
* Redo creation of kwl_knowls2 and swap in for kwl_knowls when new knowl code goes live
* Delete kwl_history and kwl_deleted tables
* For knowls that have quality 'reviewed' or 'ok', check to see which should have status 1.  Then delete quality column.
* Update scripts that copy knowls to production

IT WOULD BE NICE IF:
* Add a list of locks at the top of the knowl browse page which show your locks and give you links to delete the lock or start editing again
* Add autosaves by updating an inprogress knowl record

* Some visual distinction between mathematical content and LMFDB-specific content

Questions:
* Should we have a warning on prod show if not-reviewed/not-most-recent?
* Security exploits?

SCHEMA MODIFICATIONS:

New and modified columns in `kwl_knowls`
Column           | Type                        | Notes
-----------------|-----------------------------|------
status           | smallint                    | 1=reviewed, 0=beta, -1=in progress, -2=deleted, default 0
type             | smallint                    | 1=top, 0=normal, -1=bottom, -2=comments, default 0
links            | text[]                      | List of knowls that this knowl refers to
defines          | text[]                      | List of terms this knowl defines (terms wrapped in **)
source           | text                        | url for object that this knowl is an annotation for; NULL if not an annotation
source_name      | text                        | name for object; NULL if not an annotation
reviewer         | text                        | username of reviewer
review_timestamp | timestamp without time zone | time when this knowl was marked as reviewed

Add `kwl_locks`
Column    | Type                        | Notes
----------|-----------------------------|------
id        | text                        | Id for the knowl being locked
timestamp | timestamp without time zone | Timestamp when lock was created
username  | text                        | Username of the lock requestor

Modify `userdb.user`
Column         | Type     | Notes
---------------|----------|------
knowl_reviewer | boolean  | Whether this user can review knowls

SQL COMMANDS:

CREATE TABLE kwl_knowls2 (LIKE kwl_knowls INCLUDING ALL);
ALTER TABLE kwl_knowls2 ADD COLUMN status smallint DEFAULT 0;
ALTER TABLE kwl_knowls2 ADD COLUMN type smallint DEFAULT 0;
ALTER TABLE kwl_knowls2 ADD COLUMN links text[];
ALTER TABLE kwl_knowls2 ADD COLUMN defines text[];
ALTER TABLE kwl_knowls2 ADD COLUMN source text;
ALTER TABLE kwl_knowls2 ADD COLUMN source_name text;
ALTER TABLE kwl_knowls2 ADD COLUMN reviewer text;
ALTER TABLE kwl_knowls2 ADD COLUMN reviewer_timestamp timestamp;
ALTER TABLE kwl_knowls2 DROP COLUMN authors;
ALTER TABLE kwl_knowls2 ADD COLUMN authors text[];
ALTER TABLE kwl_knowls2 DROP COLUMN _keywords;
ALTER TABLE kwl_knowls2 ADD COLUMN _keywords text[];
ALTER TABLE kwl_knowls2 DROP COLUMN history;
ALTER TABLE kwl_knowls2 DROP CONSTRAINT kwl_knowls2_pkey;
ALTER TABLE kwl_knowls2 ALTER COLUMN title SET NOT NULL;
ALTER TABLE kwl_knowls2 ALTER COLUMN content SET NOT NULL;
ALTER TABLE kwl_knowls2 ALTER COLUMN timestamp SET NOT NULL;
GRANT SELECT ON kwl_knowls2 TO lmfdb;
GRANT SELECT ON kwl_knowls2 TO webserver;
INSERT INTO kwl_knowls2(id, cat, title, content, authors, last_author, quality, timestamp, _keywords) SELECT id, cat, title, content, ARRAY(SELECT jsonb_array_elements_text(authors)), last_author, quality, timestamp, ARRAY(SELECT jsonb_array_elements_text(_keywords)) FROM kwl_knowls;
UPDATE kwl_knowls2 SET status = 1 WHERE quality = 'reviewed';
ALTER TABLE kwl_knowls2 DROP COLUMN quality;

WITH matches AS (SELECT id, regexp_matches(content, 'KNOWL(_INC)?\([''""]([^''""]+)', 'g') AS list FROM kwl_knowls2), agged AS (SELECT matches.id AS id, array_agg(DISTINCT matches.list[2] ORDER BY matches.list[2]) AS links FROM matches GROUP BY matches.id) UPDATE kwl_knowls2 SET links = agged.links FROM agged WHERE kwl_knowls2.id = agged.id;

UPDATE kwl_knowls2 SET links = '{}' WHERE links IS NULL;

WITH matches1 AS (SELECT id, regexp_matches(content, '\*\*([^\*]+)\*\*', 'g') AS list FROM kwl_knowls2), matches2 AS (SELECT id, trim(lower(regexp_replace(regexp_replace(list[1], '\s+', ' ', 'g'), '[''""]', '', 'g'))) AS list FROM matches1), agged AS (SELECT id, array_agg(DISTINCT list ORDER BY list) AS defines FROM matches2 GROUP BY matches2.id) UPDATE kwl_knowls2 SET defines = agged.defines FROM agged WHERE kwl_knowls2.id = agged.id;

UPDATE kwl_knowls2 SET defines = '{}' WHERE defines IS NULL;

UPDATE kwl_knowls2 SET id = 'cmf' || substring(id from 12) WHERE id LIKE 'mf.elliptic%';
UPDATE kwl_knowls2 SET id = 'dq.cmf.' || substring(id from 16) WHERE id LIKE 'dq.mf.elliptic.%';
UPDATE kwl_knowls2 SET content = regexp_replace(content, 'mf\.elliptic', 'cmf', 'g');

UPDATE kwl_knowls2 SET type = 1 WHERE id LIKE '%.top';
UPDATE kwl_knowls2 SET type = -1 WHERE id LIKE '%.bottom';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'g2c\.(.*)\.top', E'Genus2Curve/Q/\\1'), regexp_replace(id, 'g2c\.(.*)\.top', E'Genus 2 Curve \\1')) WHERE id LIKE 'g2c.%.top';
UPDATE kwl_knowls2 SET source_name = 'Genus 2 Isogeny Class 277.a' WHERE id = 'g2c.277.a.top';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'ec\.q\.(.*)\.top', E'EllipticCurve/Q/\\1'), regexp_replace(id, 'ec\.q\.(.*)\.top', E'Elliptic Curve \\1')) WHERE id LIKE 'ec.q.%.top';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'ec\.q\.(.*)\.bottom', E'EllipticCurve/Q/\\1'), regexp_replace(id, 'ec\.q\.(.*)\.bottom', E'Elliptic Curve \\1')) WHERE id LIKE 'ec.q.%.bottom';
UPDATE kwl_knowls2 SET (source, source_name) = ('EllipticCurve/6.6.300125.1/1.1/a/2', 'Elliptic Curve 6.6.300125.1-1.1-a2') WHERE id = 'ec.6.6.300125.1-1.1-a2.top';
UPDATE kwl_knowls2 SET (source, source_name) = ('EllipticCurve/2.0.11.1/11.1/a/1', 'Elliptic Curve 2.0.11.1-11.1-a1') WHERE id = 'ec.2.0.11.1-11.1-a1.top';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'lattice\.(.*)\.top', E'Lattice/\\1'), regexp_replace(id, 'lattice\.(.*)\.top', E'Lattice \\1')) WHERE id LIKE 'lattice.%.top';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'nf\.(.*)\.top', E'NumberField/\\1'), regexp_replace(id, 'nf\.(.*)\.top', E'Number Field \\1')) WHERE id LIKE 'nf.%.top';
UPDATE kwl_knowls2 SET source = regexp_replace(id, 'nf\.(.*)\.bottom', E'NumberField/\\1') WHERE id LIKE 'nf.%.bottom';
UPDATE kwl_knowls2 SET (source, source_name) = (regexp_replace(id, 'nf\.(.*)\.bottom', E'NumberField/\\1'), regexp_replace(id, 'nf\.(.*)\.bottom', E'Number Field \\1')) WHERE id LIKE 'nf.%.bottom';
UPDATE kwl_knowls2 SET (id, source, source_name) = ('cmf.1.12.a.a.top', 'ModularForm/GL2/Q/holomorphic/1.12.a.a', 'Newform 1.12.a.a') WHERE id = 'mf.1.12.a.a.top';
UPDATE kwl_knowls2 SET (source, source_name) = ('GaloisGroup/4t3', 'Galois Group 4T3') WHERE id = 'gg.4t3.bottom';


CREATE TABLE kwl_locks (id text, timestamp timestamp, username text);
ALTER TABLE userdb.users ADD COLUMN knowl_reviewer boolean DEFAULT FALSE;

NOTES FOR WORKSHOP
* Remind people that they can use KNOWL_INC
